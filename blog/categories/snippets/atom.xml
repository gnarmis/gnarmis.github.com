<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: snippets | Kilotau]]></title>
  <link href="http://gnarmis.github.com/blog/categories/snippets/atom.xml" rel="self"/>
  <link href="http://gnarmis.github.com/"/>
  <updated>2013-01-08T09:18:23-06:00</updated>
  <id>http://gnarmis.github.com/</id>
  <author>
    <name><![CDATA[Gursimran Singh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Piping Arguments Through Multiple Functions in Ruby]]></title>
    <link href="http://gnarmis.github.com/blog/2012/09/19/piping-arguments-through-multiple-functions-in-ruby/"/>
    <updated>2012-09-19T16:25:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/09/19/piping-arguments-through-multiple-functions-in-ruby</id>
    <content type="html"><![CDATA[<p>After asking <code>#ruby</code> what the equivalent of Clojure's <a href="http://clojuredocs.org/clojure_core/clojure.core/-%3E">-> macro</a> could look like, I compiled the collective solution into a gist. You might find this useful somewhere, especially when you have multiple transformation functions operating on the same basic data structures.</p>

<p><div><script src='https://gist.github.com/3752271.js?file=piping_example.rb'></script>
<noscript><pre><code># piping example in Ruby

def foo(data)
  data[:a] += 1
  data
end

def bar(data)
  data[:b] += 10
  data
end

def pipe args, *methods
 methods.reduce(args) { |a, m| send(m, a) }
end

hash = {:a =&gt; 0, :b =&gt; 0}
pipe hash, :foo, :bar
#=&gt; {:a=&gt;1, :b=&gt;10}</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running processes in background and redirecting to file]]></title>
    <link href="http://gnarmis.github.com/blog/2011/11/11/running-processes-in-background-and-redirecti/"/>
    <updated>2011-11-11T14:15:00-06:00</updated>
    <id>http://gnarmis.github.com/blog/2011/11/11/running-processes-in-background-and-redirecti</id>
    <content type="html"><![CDATA[<p>When developing locally, I find it useful to have the full development server
logs available. Luckily, Rails 3.1 does this for you in the file ./log/development.log.
However, if you want something similar for other frameworks/commands that run
continuously and post any errors, etc, directly to the terminal, something
like this is useful:</p>

<p>[code]rails s >> console.out 2>&amp;1 &amp;[/code]</p>

<p>(Replace <code>rails s</code> with any similar command)</p>

<p>Also, you can easily send signals (like ctrl-c) to background processes with
<code>kill</code>.</p>

<p>List of signals:</p>

<p>[code]kill -l[/code]</p>

<p>Closing a background process with id 1:</p>

<p>[code]kill -s SIGKILL %1[/code]</p>

<p>Â </p>
]]></content>
  </entry>
  
</feed>
