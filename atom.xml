<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kilotau]]></title>
  <link href="http://gnarmis.github.com/atom.xml" rel="self"/>
  <link href="http://gnarmis.github.com/"/>
  <updated>2013-01-05T13:46:36-06:00</updated>
  <id>http://gnarmis.github.com/</id>
  <author>
    <name><![CDATA[Gursimran Singh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Project Euler Problem 3 using Clojure 1.5 and a lazy technique]]></title>
    <link href="http://gnarmis.github.com/blog/2013/01/05/project-euler-problem-3-using-clojure-1-dot-5-and-a-lazy-technique/"/>
    <updated>2013-01-05T12:36:00-06:00</updated>
    <id>http://gnarmis.github.com/blog/2013/01/05/project-euler-problem-3-using-clojure-1-dot-5-and-a-lazy-technique</id>
    <content type="html"><![CDATA[<p>The problem: find the largest prime factor of 600851475143.</p>

<p>I used the Sieve of Eratosthenes and Ruby to solve it <a href="http://kilotau.com/blog/2011/06/28/primes-and-sieves/">last time</a>.</p>

<p>This time, I tried a lazy, functional approach. The result was an efficient,
straightfoward solution that involved no sieve or any static/full-realized
data structure at all! I make a recipe for the kind of numbers I want and
then take just as many as I need in order to finally output the answer.</p>

<p>Here&#8217;s my lazy, functional implementation using Clojure 1.5 RC1 (mostly because
I wanted to play with the new reducers library). It&#8217;s pretty efficient: less
than a quarter of a second on my 2011 13&#8221; base MBP!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">euler.three</span>
</span><span class='line'> <span class="p">(</span><span class="nf">require</span> <span class="p">[</span><span class="nv">clojure.core.reducers</span> <span class="ss">:as</span> <span class="nv">r</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">declare </span><span class="nv">largest-prime-factor-for</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">declare </span><span class="nv">factors-of</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">declare </span><span class="nv">source-factors</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">declare </span><span class="nv">source-naturals</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">declare </span><span class="nv">factor?</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">declare </span><span class="nv">prime?</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">declare </span><span class="nv">certainty</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">answer</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">largest-prime-factor-for</span> <span class="mi">600851475143</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">largest-prime-factor-for</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">prime-factors</span> <span class="p">(</span><span class="nf">r/filter</span> <span class="nv">prime?</span>
</span><span class='line'>                                <span class="p">(</span><span class="nf">factors-of</span> <span class="nv">n</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">last </span><span class="p">(</span><span class="nb">into </span><span class="p">[]</span> <span class="nv">prime-factors</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factors-of</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">r/filter</span> <span class="o">#</span><span class="p">(</span><span class="nf">factor?</span> <span class="nv">n</span> <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">source-factors</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">source-factors</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">r/take-while</span> <span class="o">#</span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">%</span> <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nf">Math/sqrt</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">source-naturals</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">source-naturals</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">r/map</span> <span class="o">#</span><span class="p">(</span><span class="nb">+ </span><span class="nv">%</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">range</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factor?</span> <span class="p">[</span><span class="nv">n</span> <span class="nv">possib</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="nv">possib</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">prime?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">.isProbablePrime</span> <span class="p">(</span><span class="nf">BigInteger/valueOf</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">certainty</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">certainty</span> <span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RepoMap: track your local git repositories]]></title>
    <link href="http://gnarmis.github.com/blog/2012/12/18/repomap-track-your-local-git-repositories/"/>
    <updated>2012-12-18T16:09:00-06:00</updated>
    <id>http://gnarmis.github.com/blog/2012/12/18/repomap-track-your-local-git-repositories</id>
    <content type="html"><![CDATA[<p>Github link: <a href="http://github.com/gnarmis/repomap">RepoMap</a></p>

<p>There are hundreds of git repositories stored at various folder depths all over
my computer. Organizing them, remembering where they are or determining whether
I still have a working copy cloned from a remote repository is a chore.</p>

<p>So, why not have a map of where all my repositories are? Should be simple
enough to keep a YAML file with a map from paths to repository names.</p>

<p>After some hacking on a flight (after having finished finals and an interview),
I made a little Ruby CLI program and found it to be useful enough to expand into
a tiny little gem. It&#8217;s still very basic, and specs aren&#8217;t where they should be,
but the essentials are there.</p>

<p>It&#8217;s called RepoMap, and you can find it here:
<a href="http://github.com/gnarmis/repomap">http://github.com/gnarmis/repomap</a>.</p>

<p>You can also install it by typing <code>gem install repomap</code>.</p>

<p>Check out the above link for details about how it works. Pull requests are
welcome! I&#8217;m thinking there&#8217;s a number of cool additions possible, such as
mining all that useful meta data about git repositories, and making use of the
map in interesting ways.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack Northwestern updates]]></title>
    <link href="http://gnarmis.github.com/blog/2012/10/18/hack-northwestern-updates/"/>
    <updated>2012-10-18T19:45:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/10/18/hack-northwestern-updates</id>
    <content type="html"><![CDATA[<p>It&#8217;s been a busy few days at Hack Northwestern! We got a <a href="http://hacknorthwestern.com">new home</a>, announced a <a href="http://hacknorthwestern.com/imo-hackathon.html">hackathon</a> sponsored by <a href="http://imo.im">imo</a>, and just wrapped up a tech talk / hack night by folks from <a href="http://seelio.com">Seelio</a> yesterday!</p>

<p>It&#8217;s humbling to note that this started as an idle suggestion last spring, and then a quick get-together of around 7 students. Here&#8217;s an <a href="http://northbynorthwestern.com/story/30-collaborate-eat-pizza-at-hackathon/">article</a> about only the second such hack night, which exploded to around 30-40 people (even some from UChicago!). The idea behind this effort has stayed constant: fostering student creativity, entrepreneurship, and hacker spirit. It&#8217;s a testament to Northwestern&#8217;s active entrepreneur and hacker community that Hack Northwestern is seeing such quick validation of its efforts.</p>

<p>As we continue to build connections between different communities at Northwestern and the tech world at large, we find an undercurrent of excitement that is inspiring. And hearing about similar such efforts at various other universities is even more gratifying.</p>

<p>University is more than just a trade school, and Hack Northwestern hopes to prove that.</p>

<p>If this is the first you&#8217;ve heard of us, check out our <a href="http://hacknorthwestern.com">home</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby's `method_missing` is cool / hashes as functions of their keys]]></title>
    <link href="http://gnarmis.github.com/blog/2012/09/26/rubys-method-missing-is-kinda-nice/"/>
    <updated>2012-09-26T11:59:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/09/26/rubys-method-missing-is-kinda-nice</id>
    <content type="html"><![CDATA[<p>I had an idea to try and bring a tiny bit of Clojure&#8217;s ideas of hash-maps to Ruby&#8217;s hashes. I came up with a simple monkey-patch that allows you to truly use hashes as functions of their keys. In the process, I&#8217;ve come to really dig <code>method_missing</code>, although debugging it can be a chore. Word of advice: always implement <code>respond_to?</code> with your <code>method_missing</code>. Principle of Least Surprise, people.</p>

<div><script src='https://gist.github.com/3789174.js?file=functional_hash.rb'></script>
<noscript><pre><code># In Clojure, hash-maps are truly functions of keys to values.
# So you can do `(:a {:a 1})` and get `1` as the result
# Why not put this in Ruby?

# access keys of a hash like a function

class Object
  def respond_to?(method)
    if (method.to_s =~ /^_.*/) == 0
      true
    else
      super
    end
  end
  def method_missing(name, *args, &amp;b)
    if (args.count==1) &amp;&amp; b.nil? &amp;&amp; name[0]==&quot;_&quot; &amp;&amp;
       args[0].has_key?(name[1..-1].to_sym)
      args[0][name[1..-1].to_sym]
    else
      super
    end
  end
end


hash = {:a =&gt; 1}
(_a hash) == 1 #=&gt; true
(_a hash) == (hash [:a]) #=&gt; true

# the underscore serves to prevent naming conflicts to a degree


</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Ruby 1.9's Flexible Syntax]]></title>
    <link href="http://gnarmis.github.com/blog/2012/09/25/on-ruby-1-dot-9-s-flexible-syntax/"/>
    <updated>2012-09-25T13:57:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/09/25/on-ruby-1-dot-9-s-flexible-syntax</id>
    <content type="html"><![CDATA[<p>Over the past day or so, I&#8217;ve been playing around with small bits of Ruby after spending most of the summer in Clojure-land. There&#8217;s great similarities in both Ruby and Clojure (functional style, dynamic, etc), and both are very practical choices. Clojure gives you amazing access to JVM land while not forcing you to pull your hair out, and Ruby grants you a good selection of libraries and amazing tools for web development.</p>

<p>But here I want to highlight a few experiments I did to try and brighten up my Ruby-writing experience. The things here could be unneccessarily divergent, but what the hell. It made me realize you can bend Ruby in a lot of ways I hadn&#8217;t thought of before</p>

<h2>define methods on the fly</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">defn</span> <span class="nb">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span>
</span><span class='line'>  <span class="no">Object</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>:define_method</code> is an amazing little method that allows you define methods (on any object too, so you could define class/module methods). That&#8217;s all there is to it. Now you can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">defn</span><span class="p">(</span><span class="ss">:a</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="o">*</span><span class="n">y</span><span class="o">|</span> <span class="nb">print</span> <span class="n">x</span><span class="p">;</span> <span class="nb">print</span> <span class="n">y</span><span class="p">}</span>
</span><span class='line'><span class="c1"># and if you want to superficially lispy</span>
</span><span class='line'><span class="p">(</span><span class="n">defn</span> <span class="p">(</span><span class="ss">:a</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="o">*</span><span class="n">y</span><span class="o">|</span> <span class="nb">print</span> <span class="n">x</span><span class="p">;</span> <span class="nb">print</span> <span class="n">y</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">a</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="c1">#-&gt; 1[2,3,4]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># for multiline methods, this seems easier:</span>
</span><span class='line'><span class="n">defn</span> <span class="p">(</span><span class="ss">:sum_of_squares</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also works for associating any name with any kind of lambda.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="n">defn</span> <span class="p">(</span><span class="ss">:foo</span><span class="p">)</span> <span class="p">{</span><span class="mi">23</span><span class="p">})</span>
</span><span class='line'><span class="n">foo</span> <span class="o">==</span> <span class="mi">23</span> <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>let / with</h2>

<p>In Lispy languages, there&#8217;s something like a function called <code>let</code> which lets you define some names in a new lexical scope and operate with them. An example in Clojure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">x</span> <span class="mi">1</span><span class="p">]</span> <span class="nv">x</span><span class="p">)</span> <span class="c1">;-&gt; 1</span>
</span><span class='line'><span class="nv">x</span> <span class="c1">;-&gt; error, x is not defined outside the above form</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Ruby, we have something kind of like that called <code>#tap</code>, which Zach Hobson covered <a href="http://www.opensourcery.com/blog/zack-hobson/objectlet-ruby-0">here</a>. He suggested a simple way to define <code>#let</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Object</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">let</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Now you can do this:</span>
</span><span class='line'>
</span><span class='line'><span class="p">((</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">let</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">})</span> <span class="o">==</span> <span class="mi">3</span> <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I think an even more beautiful way to do it is like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">with</span> <span class="n">coll</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span>
</span><span class='line'> <span class="n">coll</span><span class="o">.</span><span class="n">map</span> <span class="o">&amp;</span><span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">with</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]]</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">}</span> <span class="c1">#=&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more on destructuring and everything&#8217;s that&#8217;s possible there, check out <a href="http://po-ru.com/diary/destructuring-assignment-in-ruby/">this post</a>.</p>

<h2>map, reduce, filter, pipe, call, body</h2>

<p>There&#8217;s a lot more craziness to explore. I&#8217;ll let the code, comments, and examples from my <a href="https://gist.github.com/3760519">gist</a> explain. This is just bits of code here and there, honestly. <a href="http://twitter.com/gnarmis">Tweet at me</a> to discuss! Also, the <a href="https://gist.github.com/3760519">gist</a> will be the most up-to-date version of this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># execute an array of lambdas one after another?</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">body</span> <span class="o">*</span><span class="n">args</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">call</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">body</span> <span class="p">(</span><span class="nb">lambda</span> <span class="p">{</span><span class="nb">print</span> <span class="mi">1</span><span class="p">}),</span> <span class="p">(</span><span class="nb">lambda</span> <span class="p">{</span><span class="nb">print</span> <span class="mi">2</span><span class="p">}))</span> <span class="c1">#=&gt; output: 12</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># map as a &quot;top-level&quot; function. This maps some lambda to an array, </span>
</span><span class='line'><span class="c1"># passing each element to the lambda to call.</span>
</span><span class='line'><span class="c1"># (also, who doesn&#39;t like stabby lambdas?)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">map</span> <span class="n">fun</span><span class="p">,</span> <span class="n">coll</span>
</span><span class='line'>  <span class="n">coll</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">fun</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">i</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">map</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">){</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">},</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span> <span class="c1">#=&gt; [2, 3, 4]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># reduce as a &quot;top-level&quot; function</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">reduce</span> <span class="n">fun</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="n">coll</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">coll</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">fun</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span> <span class="k">unless</span> <span class="n">val</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">coll</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="n">sum</span><span class="o">.</span><span class="n">send</span> <span class="n">fun</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="n">i</span><span class="p">}</span> <span class="k">if</span> <span class="n">val</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">reduce</span> <span class="ss">:+</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span> <span class="c1">#=&gt; 6</span>
</span><span class='line'><span class="p">(</span><span class="n">reduce</span> <span class="ss">:+</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span> <span class="c1">#=&gt; 9</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># piping a single input through a bunch of functions</span>
</span><span class='line'><span class="c1"># (yay, composable functions!)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pipe</span> <span class="n">args</span><span class="p">,</span> <span class="o">*</span><span class="nb">methods</span>
</span><span class='line'> <span class="nb">methods</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="o">|</span> <span class="nb">send</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">data</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bar</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span><span class="o">[</span><span class="ss">:b</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="n">data</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:a</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'><span class="p">(</span><span class="n">pipe</span> <span class="nb">hash</span><span class="p">,</span> <span class="ss">:foo</span><span class="p">,</span> <span class="ss">:bar</span><span class="p">)</span> <span class="c1">#=&gt; {:a=&gt;1, :b=&gt;10}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good old filter is also pretty easy to define</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">filter</span> <span class="n">pred</span><span class="p">,</span> <span class="n">coll</span>
</span><span class='line'>  <span class="n">coll</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">select</span> <span class="o">&amp;</span><span class="n">pred</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">filter</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">){</span><span class="n">x</span><span class="o">.</span><span class="n">even?</span><span class="p">},</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1">#=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># a function to call a lambda (forcing it to execute)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">call</span> <span class="n">b</span><span class="p">;</span> <span class="n">b</span><span class="o">.</span><span class="n">call</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">saved</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span><span class="nb">puts</span> <span class="s2">&quot;did I get called?&quot;</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;Proc:blahblahblah (lambda)&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">call</span> <span class="p">(</span><span class="nb">lambda</span> <span class="p">{</span><span class="nb">puts</span> <span class="s2">&quot;I got called!&quot;</span><span class="p">;</span> <span class="n">reduce</span> <span class="ss">:+</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">}))</span>
</span><span class='line'><span class="c1">#=&gt; output: I got called!\n =&gt; 6</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Piping Arguments Through Multiple Functions in Ruby]]></title>
    <link href="http://gnarmis.github.com/blog/2012/09/19/piping-arguments-through-multiple-functions-in-ruby/"/>
    <updated>2012-09-19T16:25:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/09/19/piping-arguments-through-multiple-functions-in-ruby</id>
    <content type="html"><![CDATA[<p>After asking <code>#ruby</code> what the equivalent of Clojure&#8217;s <a href="http://clojuredocs.org/clojure_core/clojure.core/-%3E">-> macro</a> could look like, I compiled the collective solution into a gist. You might find this useful somewhere, especially when you have multiple transformation functions operating on the same basic data structures.</p>

<div><script src='https://gist.github.com/3752271.js?file=piping_example.rb'></script>
<noscript><pre><code># piping example in Ruby

def foo(data)
  data[:a] += 1
  data
end

def bar(data)
  data[:b] += 10
  data
end

def pipe args, *methods
 methods.reduce(args) { |a, m| send(m, a) }
end

hash = {:a =&gt; 0, :b =&gt; 0}
pipe hash, :foo, :bar
#=&gt; {:a=&gt;1, :b=&gt;10}</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving From Posterous to Github Pages]]></title>
    <link href="http://gnarmis.github.com/blog/2012/09/14/moving-from-posterous-to-github-pages/"/>
    <updated>2012-09-14T02:27:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/09/14/moving-from-posterous-to-github-pages</id>
    <content type="html"><![CDATA[<p>Ever since Posterous was acquired by Twitter, I&#8217;d been meaning to ditch the service for something better. While it was convenient to post by email and enjoyable to forget about hosting, I missed controlling the structure of my raw posts and the site&#8217;s design.</p>

<p>So when I discovered <a href="http://octopress.org">Octopress</a>, I was quickly won over. Finally, a hacker&#8217;s workflow: compose post in Markdown, generate static content, push content to Github Pages. And since all posts are in Markdown, you truly have portable, human-readable content!</p>

<p>Once I had a repository on Github setup with my Octopress-powered blog, I needed to import posts from Posterous. Unfortunately, it wasn&#8217;t a straightforward process, but I decided to automate away the drudgery and share some code with you in the process.</p>

<p>After consulting <a href="http://posterous.com/api">Posterous&#8217;s API</a>, I realized I only really needed my &#8220;site_id&#8221; to pull all my posts in a single JSON request. The following URLs were helpful for this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># http://posterous.com/api/2/users/me =&gt; authenticated user&#39;s info, including ID</span>
</span><span class='line'><span class="c1"># http://posterous.com/api/2/sites?id=1021298 =&gt; sites of user; figure out site_id</span>
</span><span class='line'><span class="c1"># http://posterous.com/api/2/sites/2464344/posts =&gt; all of kilotau&#39;s posts in JSON; using site_id</span>
</span></code></pre></td></tr></table></div></figure>


<p>After I had my posts downloaded in <code>posts.json</code>, I transformed each post to Markdown and manually formatted them for Octopress. I used the simple <a href="https://github.com/singpolyma/HTML2Markdown">HTML2Markdown</a> script and the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># this uses ruby-1.9.3</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./html2markdown.rb&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;date&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">json</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;./posts.json&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">json</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">j</span><span class="o">|</span>
</span><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">j</span><span class="o">[</span><span class="s1">&#39;display_date&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;./md/&quot;</span> <span class="o">+</span> <span class="n">d</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">+</span> <span class="n">j</span><span class="o">[</span><span class="s1">&#39;slug&#39;</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;.markdown&quot;</span>
</span><span class='line'>  <span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;---</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;layout: post</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;title: &quot;</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">j</span><span class="o">[</span><span class="s1">&#39;title&#39;</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;date: &quot;</span> <span class="o">+</span> <span class="n">j</span><span class="o">[</span><span class="s1">&#39;display_date&#39;</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;comments: false</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;external-url:</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;categories:</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;---</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">write</span> <span class="no">HTML2Markdown</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">j</span><span class="o">[</span><span class="s1">&#39;body_cleaned&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a moment, I had all my posts converted.</p>

<p>Now that I have my past posts, it&#8217;s time to play with the design!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a simple sentiment analyzer using Clojure]]></title>
    <link href="http://gnarmis.github.com/blog/2012/07/06/creating-a-simple-sentiment-analyzer-using-cl/"/>
    <updated>2012-07-06T19:49:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/07/06/creating-a-simple-sentiment-analyzer-using-cl</id>
    <content type="html"><![CDATA[<p>TL;DR <a href="https://github.com/gnarmis/sentimental">https://github.com/gnarmis/sentimental</a></p>

<p>Sentiment analysis is the hot thing to do these days. One example is ViralHeat,
a social media monitoring platform that uses sentiment analysis to provide
a picture about how the conversation is trending about certain keywords (or
combinations of keywords, which they call profiles). There&#8217;s a lot of such
products, and for developers there&#8217;s a lot of high-quality and extensive libraries
and toolkits that provide for this among other solutions, such Java&#8217;s WEKA
or OpenNLP, or Python&#8217;s NLTK. There&#8217;s even many third-party solutions that
provide an API you can use to get sentiment analysis, such as AlchemyAPI.</p>

<p>After deciding to create my very own sentiment analysis tool using Clojure,
I began researching libraries in both Java and Clojure (because Clojure&#8217;s interop
means that I can easily use Java libraries). There&#8217;s a lot of powerful tools
out there, but my goal was to find something simple that could allow me to
make a good enough sentiment analyzer without breaking the technical bank,
so to speak.</p>

<p>At first, I was looking for facilities to stem words, for which someone had
already provided a Clojure-wrapper around the Java library Snowball. <a href="http://kilotau.com/a-brief-foray-into-deploying-clojure-librarie">I forked
this and deployed it to Clojars</a>. This, and a simple list of stop words
to ignore, would allow me to reduce redundancies and get a &#8220;bag of words&#8221; representation
of the target document.</p>

<p>Next, I wanted a nice and simple NLP library. <a href="https://github.com/dakrone/clojure-opennlp">Clojure-OpenNLP</a> fit the
bill perfectly. It even had a document categorizer I could train!</p>

<p>Now, I should briefly explain the overall process. At the heart of the sentiment
analyzer is a naive-Bayesian classifier. This classifier is provided with a
labelled list as training material (&#8220;sad&#8221; is &#8220;negative&#8221;, &#8220;happy&#8221; is &#8220;positive&#8221;).
The various categories are the sentiments, such as &#8220;positive&#8221;, &#8220;negative&#8221;,
&#8220;neutral&#8221; (I used 6 categories, for strong/weak sentiment). The classifier
then learns to associate categories with words, based on training information
that is supplied to it. Given a new sentence, the classifier then calculates
the probabilities of each word belonging to each category, and the category
with the best probability of covering the sentence is returned. Learn more
about how to build naive-Bayes classifiers <a href="http://bionicspirit.com/blog/2012/02/09/howto-build-naive-bayes-classifier.html">here</a>.</p>

<p>So, the next step was to get the actual training data. I found the <a href="http://www.cs.pitt.edu/mpqa/">subjectivity
lexicon</a> to fit my needs perfectly. After parsing the document into a vector
of hash-maps, I was able to create a <a href="https://github.com/gnarmis/sentimental/blob/master/src/models/sentiment.train">training document</a> for my very own
opennlp model, which was to be the classifier. The other step was to create
a function that would remove stop words and also stem each word. This was pretty
easy to do using the <a href="https://github.com/gnarmis/snowball-stemmer">snowball-stemmer</a> library and a few lines of Clojure.</p>

<p>Granted, I didn&#8217;t build my own naive-Bayes classifier, but that&#8217;s a project
for another time :)</p>

<p>And here&#8217;s the project: https://github.com/gnarmis/sentimental</p>

<p>You do need to install Leiningen and have JDK 1.6 on your machine. After these
two steps, simply <code>cd</code> into the project and type <code>lein repl</code>, following the
example in the readme.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A brief foray into deploying Clojure libraries]]></title>
    <link href="http://gnarmis.github.com/blog/2012/07/05/a-brief-foray-into-deploying-clojure-librarie/"/>
    <updated>2012-07-05T15:50:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/07/05/a-brief-foray-into-deploying-clojure-librarie</id>
    <content type="html"><![CDATA[<p>Having found an <a href="https://github.com/weavejester/snowball-stemmer">awesome little wrapper</a> for <a href="http://snowball.tartarus.org/">Snowball</a> (which allows
for stemming of words, like &#8220;going&#8221; -> &#8220;go&#8221;), I decided that it was the perfect
opportunity to try creating my very own &#8220;Clojar&#8221; and deploying it. It didn&#8217;t
take long to fork the repo, make an account on clojars.org, make some minimal
changes, and deploy this library. The nice thing is that everyone now has an
easy way to try this out. I&#8217;m honestly surprised it was this easy and quick
to deploy the thing!</p>

<p>Check out my fork: (<a href="https://github.com/gnarmis/snowball-stemmer)">https://github.com/gnarmis/snowball-stemmer)</a></p>

<p>And the clojar itself is here: (<a href="https://clojars.org/org.clojars.gnarmis/snowball-stemmer)">https://clojars.org/org.clojars.gnarmis/snowball-stemmer)</a></p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experimenting with persistence using Korma and Lobos]]></title>
    <link href="http://gnarmis.github.com/blog/2012/07/03/experimenting-with-persistence-using-korma-an/"/>
    <updated>2012-07-03T22:47:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/07/03/experimenting-with-persistence-using-korma-an</id>
    <content type="html"><![CDATA[<p><a href="http://webnoir.org">Noir</a> is an excellent, Sinatra-like framework in Clojure, and <a href="http://sqlkorma.com">Korma</a>
is a great companion. But in a lot of database-backed services, you often need
migrations to make sane changes to the database and have the abilitiy to roll
back your various schema changes. Lobos is a little library (among a few) that
tries to do this, but seeing only a few examples <a href="http://www.vijaykiran.com/2012/01/17/web-application-development-with-clojure-part-2/">here</a> and <a href="http://pupeno.com/2011/08/20/how-to-use-lobos-with-heroku/">there</a>,
I decided to make my own little template that explores this.</p>

<p>So, here&#8217;s the repo: https://github.com/gnarmis/korma-lobos-tpl</p>

<p>I did run into an issue trying to find out how to do the classic &#8220;alter&#8221; SQL
command to add a column using Lobos. Turns out, just try <code>(doc alter)</code> after
first typing in that first long <code>(use ...)</code> command in the repo&#8217;s readme. But
I just documented the bug for now.</p>

<p>Also, there is a very simple entity definition to demonstrate Korma, and I&#8217;ve
tested the setup and confirmed that the migration executed, and the entity
got added.</p>

<p>I&#8217;ll maybe explore Drift in the future, although there&#8217;s already <a href="https://github.com/pjlegato/korma-drift-template">this excellent
template</a> I could build on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I made a Clojure and FP themed wallpaper for myself]]></title>
    <link href="http://gnarmis.github.com/blog/2012/07/02/i-made-a-clojure-and-fp-themed-wallpaper-for/"/>
    <updated>2012-07-02T17:14:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/07/02/i-made-a-clojure-and-fp-themed-wallpaper-for</id>
    <content type="html"><![CDATA[<p>There&#8217;s few things as iconic as the Y-Combinator in functional programming.
I must mention http://www.fatvat.co.uk/2009/04/understanding-y-combinator.html
as providing the actual snippet. To learn more, check out <a href="http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator">the wiki</a>.</p>

<p>Update: http://imgur.com/Tgg54. Yep, it&#8217;s 2880x1800.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rich Hickey's awesome talk: Simple Made Easy]]></title>
    <link href="http://gnarmis.github.com/blog/2012/07/02/rich-hickeys-awesome-talk-simple-made-easy/"/>
    <updated>2012-07-02T12:41:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/07/02/rich-hickeys-awesome-talk-simple-made-easy</id>
    <content type="html"><![CDATA[<p><a href="http://www.infoq.com/presentations/Simple-Made-Easy">http://www.infoq.com/presentations/Simple-Made-Easy</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Steps Into Clojure Land]]></title>
    <link href="http://gnarmis.github.com/blog/2012/07/01/some-steps-into-clojure-land/"/>
    <updated>2012-07-01T01:32:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/07/01/some-steps-into-clojure-land</id>
    <content type="html"><![CDATA[<p>I&#8217;m really digging this wonderful little language called Clojure. It&#8217;s a modern
Lisp, meaning it has all the functional goodness I have been craving after
using Racket. It&#8217;s awesome being able to build things like interpreters and
type checkers, which I didn&#8217;t think I&#8217;d be able to approach so easily (this
was part of an awesome programming languages class taught by Robbie Findler).
But Clojure is also a JVM language and can be compiled ahead of time, so it&#8217;s
exceedingly practical and efficient. You can use any Java library and interop
with other JVM languages pretty well.</p>

<p>Clojure is a young language, but has a very energetic community. It&#8217;s also
seeing use both in industry and startups. Check out <a href="http://www.infoq.com/presentations/Clojure-powered-Startups">this talk</a> for more
on that.</p>

<p>There&#8217;s a lot of resources out there too. I&#8217;ve gone through parts of <a href="http://www.clojurebook.com/">Clojure
Programming</a>, done some challenges on <a href="http://www.4clojure.com/">4Clojure</a>, played around with <a href="http://www.chris-granger.com/2012/06/24/its-playtime/">Light
Table Playground</a>, and keep finding more things to explore. One book I definitely
want to explore is <a href="http://joyofclojure.com/">The Joy of Clojure</a>. Also, I&#8217;ve decided to go through
SICP using clojure, and ran across <a href="http://sicpinclojure.com/">this gem</a>.</p>

<p>As for tools, I&#8217;ve tried <a href="http://code.google.com/p/counterclockwise/">CounterClockwise</a> and <a href="http://devnet.jetbrains.net/community/idea/clojure">La Clojure</a>, but for
now I&#8217;ve settled for my usual lightweight editor: Sublime Text 2, with SublimeREPL.
Having a syntax-highlighted REPL that behaves like my editor is pretty nice. <a href="https://github.com/technomancy/leiningen/">Leiningen</a> has
been brilliant as a dependency-management tool, which also supports a host
of other things like building, testing, running, or launching a REPL with your
project. Honestly, Leiningen is the best dependency manager I&#8217;ve ever used.
I wish there was something this good in Ruby-land.</p>

<p>A great place to find links to all sorts of tools for Clojure development is <a href="http://www.clojure-toolbox.com/">Clojure
Toolbox</a>. It shows how practical Clojure is today.</p>

<p>I have to mention <a href="http://webnoir.org/">Noir</a> and <a href="http://sqlkorma.com/">Korma</a>. If you&#8217;re into web dev, you might
find yourself loving the simplicity of Noir and the interesting functional
approach to persistence in Korma. I find it awesome that <a href="http://chris-granger.com/">Chris Granger</a>,
the guy behind Light Table, wrote both of them.</p>

<p>Btw, #clojure on irc.freenode.net is friendly!</p>

<p> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's Alive!]]></title>
    <link href="http://gnarmis.github.com/blog/2012/04/29/its-alive/"/>
    <updated>2012-04-29T17:15:37-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/04/29/its-alive</id>
    <content type="html"><![CDATA[<p><a href="http://getsoundboard.com">http://getsoundboard.com</a></p>

<p>Me and Jon are finally at the stage where we can start showing off our <br/>
idea called SoundBoard, which was conceived and well received at a <br/>
hackathon last weekend. After talking about it with several great <br/>
people at TEDxUChicago, we feel the need to learn as much as possible <br/>
about how people use it. We have also put up a link on the site to <br/>
allow easy feedback, so be sure to check it out and tell us what you <br/>
think!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my hackathon experience last weekend]]></title>
    <link href="http://gnarmis.github.com/blog/2012/04/27/my-hackathon-experience-last-weekend/"/>
    <updated>2012-04-27T01:23:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/04/27/my-hackathon-experience-last-weekend</id>
    <content type="html"><![CDATA[<p>Me and Jonathan Chan (@jonishungry) had quite the adventure last weekend. Managing
a two hour El ride; being completely lost on the UChicago campus; sleeping
in a tiny student government office since the venue wasn&#8217;t 24/7 (graciously
provided by @hackuc); discovering that Fermi worked in Ryerson Hall (where
we hacked), and that Carl Sagan used to go to the observation tower there.
Oh, and winning second place (by 1 vote)!</p>

<p>The app we built was <a href="http://soundingboard.heroku.com">SoundingBoard</a>: a crowd-driven music player. Let&#8217;s
say you have a venue and you want to play some music while also allowing people
to suggest artists they love (with minimal effort on your part). You sign in
with an Rdio account, give us the place name in a hashtag-friendly manner,
give us the place&#8217;s address, and we setup a page for you that plays songs.
Now, put this up on a screen and people can tweet their favorite artists (with
the appropriate hashtag) in order to add them to the artist pool. The player
then randomly selects from the artist pool, which ranks artists based on the
number of mentions in tweets/retweets. Needless to say, it was an API-wrangling
bonanza, with lots of hard decisions about which features we had to cut and
which were absolutely essential to the experience. It was also probably our
most productive 30 hour sprint ever.</p>

<p>We successfully demoed our app, adding tweets live which were parsed for artist
names, updating the pool and affecting the next song&#8217;s choice. And we almost
won the whole thing! But it&#8217;s ok; we still got VIP tickets to TEDxUChicago,
which promises to be amazing. Enova, the company backing the hackathon, and
the hack@uchicago team (@hackuc) should be lauded for supporting such an amazing
event.</p>

<p>We were definitely thrilled to see some validation of our idea and want to
explore it further. Any updates will be up on our launch-rock page at <a href="http://soundingboard.heroku.com">http://soundingboard.heroku.com</a>,
and emailed to everyone who&#8217;s signed up to our mailing list!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Model Checking]]></title>
    <link href="http://gnarmis.github.com/blog/2012/04/12/model-checking/"/>
    <updated>2012-04-12T20:20:00-05:00</updated>
    <id>http://gnarmis.github.com/blog/2012/04/12/model-checking</id>
    <content type="html"><![CDATA[<blockquote><p>I had a scheme, which I still use today when somebody is explaining something
that I&#8217;m trying to understand: I keep making up examples. For instance, the
mathematicians would come in with a terrific theorem, and they&#8217;re all excited.
As they&#8217;re telling me the conditions of the theorem, I construct something
which fits all the conditions. You know, you have a set (one ball) - disjoint
(two halls). Then the balls turn colors, grow hairs, or whatever, in my head
as they put more conditions on. Finally they state the theorem, which is some
dumb thing about the ball which isn&#8217;t true for my hairy green ball thing, so
I say, &#8220;False!&#8221;</p>

<p> If it&#8217;s true, they get all excited, and I let them go on for a while. Then
I point out my counterexample.</p>

<p>&#8220;Oh. We forgot to tell you that it&#8217;s Class 2 Hausdorff homomorphic.&#8221;</p>

<p>&#8220;Well, then,&#8221; I say, &#8220;It&#8217;s trivial! It&#8217;s trivial!&#8221;</p>

<p>&#8211; Richard Feynman</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rocketship]]></title>
    <link href="http://gnarmis.github.com/blog/2012/03/10/rocketship/"/>
    <updated>2012-03-10T20:07:00-06:00</updated>
    <id>http://gnarmis.github.com/blog/2012/03/10/rocketship</id>
    <content type="html"><![CDATA[<p>Introducing Rocketship: a Rack based template that integrates multiple micro-frameworks.</p>

<p><a href="https://github.com/gnarmis/rocketship"><strong>github.com/gnarmis/rocketship</strong></a></p>

<p> </p>

<p>I recently came across some useful Sinatra templates and ended up having to
integrate several things together in a service I&#8217;m currently working on. So,
I extracted the basic stuff out and it&#8217;s turned out to be useful for spinning
up a quick web service. Best thing is that it doesn&#8217;t impose a strict structure
and you can follow best-practices of your micro-framework of choice.</p>

<p>Currently, Rocketship integrates Grape and Sinatra, along with a bevy of testing
facilities.</p>

<p>Comments/improvements welcome!</p>

<p> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A modular, test-driven Sinatra template]]></title>
    <link href="http://gnarmis.github.com/blog/2012/03/02/a-modular-test-driven-sinatra-template/"/>
    <updated>2012-03-02T19:28:00-06:00</updated>
    <id>http://gnarmis.github.com/blog/2012/03/02/a-modular-test-driven-sinatra-template</id>
    <content type="html"><![CDATA[<p>I recently found a (somewhat old) but great repository: https://github.com/daddz/sinatra-rspec-bundler-template.
The structure really helps you build modular Sinatra apps and has the basics
needed for you to jump in and start building.</p>

<p>However, after discovering the joys of the <a href="https://www.ruby-toolbox.com/projects/simplecov">SimpleCov</a> gem, which generates
code coverage reports in HTML, I wanted to tweak this already-awesome repository.
Also, I wanted a few more Rake tasks to help with everyday development.</p>

<p>So, <a href="https://github.com/gnarmis/sinatra-rspec-bundler-template">here&#8217;s my fork</a> with some improvements.</p>

<p>To begin, just define your own app like the one defined in lib/foo.rb. You
can create multiple such apps and route requests to each one separately. To
do that, just add those mappings to config.ru (foo and bar have been configured
in this manner).</p>

<p>This template also uses Bundler to manage its dependencies, so if you need
a new gem just add it to the Gemfile and run <code>bundle install</code>. I also recommend
using RVM to manage your gems (create a new gemset for each app).</p>

<p>Also, use RSpec to test your app, and run the specs with the defined Rake tasks.
Run <code>rake</code> or <code>rake help</code> to see available tasks. Run <code>rake spec</code> to run your
specs defined under spec/.</p>

<p>You can generate code coverage reports by running <code>rake coverage</code>.</p>

<p>You can also run a console with your app&#8217;s environment by running <code>rake console</code>.</p>

<p>So, there you have it: a simple template with enough structure to support your
Sinatra development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My CATS mini-course about web dev]]></title>
    <link href="http://gnarmis.github.com/blog/2012/02/28/my-cats-mini-course-about-web-dev/"/>
    <updated>2012-02-28T14:34:00-06:00</updated>
    <id>http://gnarmis.github.com/blog/2012/02/28/my-cats-mini-course-about-web-dev</id>
    <content type="html"><![CDATA[<p>Northwestern&#8217;s <a href="http://nucats.org">CATS</a> group is an amazing mix of technical and creative
talent, and I recently had a great opportunity to help people interested in
web development get their feet wet. I decided to choose Sinatra, which I&#8217;m
actively using at my <a href="http://nux.northwestern.edu">work</a> and which allows a greatly simplified introduction
to real web development.</p>

<p>Here&#8217;s a link to the video: http://www.youtube.com/watch?feature=player_embedded&amp;v=oDwZPXfCOYs</p>

<p>Also, here&#8217;s a link to the associated Github repo: https://github.com/gnarmis/meerkat</p>

<p>Based on this experience, I&#8217;m hoping to teach a few more mini-courses in the
coming quarters. Maybe RESTful services? Mobile dev? There&#8217;s quite a few useful
topics to choose from.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first (extremely simple) Chrome extension!]]></title>
    <link href="http://gnarmis.github.com/blog/2011/12/16/my-first-extremely-simple-chrome-extension/"/>
    <updated>2011-12-16T02:17:00-06:00</updated>
    <id>http://gnarmis.github.com/blog/2011/12/16/my-first-extremely-simple-chrome-extension</id>
    <content type="html"><![CDATA[<p>&#8230;and it was really quite simple to do! <strong>Sherlock</strong> is pretty stupid: all
you can do is click on him to specifically google the current tab&#8217;s website.
So, if you find yourself adding &#8220;site:example.com&#8221; to your Google searches
often, this should be a nice shortcut.</p>

<p>Here&#8217;s the MIT-licensed code: <a href="https://github.com/gnarmis/sherlock">https://github.com/gnarmis/sherlock</a>. Download
the install package <a href="https://github.com/downloads/gnarmis/sherlock/sherlock-0.1.1.crx">here</a>; double-click to install. I&#8217;ve even put this
puny release on the Chrome Web Store, but it&#8217;s not showing up yet.</p>

<p><strong>EDIT: <a href="https://chrome.google.com/webstore/detail/ddkcfeidojaepdblgejjcggpgobiepnj">this link</a> should work!</strong></p>

<p>I&#8217;d love some comments/feedback! I&#8217;d rather not spend my precious winter break
on a doomed hobbyist project&#8230;</p>
]]></content>
  </entry>
  
</feed>
